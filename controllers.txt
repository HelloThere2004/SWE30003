1. **AuthController** (`src/auth/auth.controller.ts`)
   - **POST /auth/signup**
     - Description: Register a new user.
     - Body:
       ```json
       {
         "name": "string",
         "email": "string",
         "password": "string",
         "phone": "string (optional)"
       }
       ```
   - **POST /auth/signin**
     - Description: Log in an existing user.
     - Body:
       ```json
       {
         "email": "string",
         "password": "string"
       }
       ```
   - **POST /auth/signout**
     - Description: Log out the currently authenticated user.
     - Headers:
       - `Authorization: Bearer <token>`

2. **UserController** (`src/user/user.controller.ts`)
   - **GET /user/findAll**
     - Description: Retrieve all users.
   - **GET /user/findOne/:id**
     - Description: Retrieve a specific user by ID.
     - Params:
       - `id: number`
   - **POST /user/create**
     - Description: Create a new user.
     - Body:
       ```json
       {
         "name": "string",
         "age": "number",
         "email": "string",
         "phone": "string",
         "password": "string",
         "role": "customer | driver | manager",
         "licensePlate": "string (optional)",
         "vehicleModel": "string (optional)"
       }
       ```
   - **POST /user/create-multiple**
     - Description: Create multiple users (for testing purposes).
     - Body: Array of user objects (same as `/user/create`).
   - **PUT /user/update/:id**
     - Description: Update an existing user by ID.
     - Params:
       - `id: number`
     - Body: Partial user object (same as `/user/create`).
   - **DELETE /user/delete/:id**
     - Description: Delete a user by ID.
     - Params:
       - `id: number`

3. **RideController** (`src/ride/ride.controller.ts`)
   - **POST /ride/request**
     - Description: Request a new ride (requires authentication as a customer).
     - Headers:
       - `Authorization: Bearer <token>`
     - Body:
       ```json
       {
         "pickupLocation": "string",
         "dropoffLocation": "string",
         "paymentMethod": "cash | online"
       }
       ```
   - **GET /ride/history**
     - Description: Get the ride history of the currently authenticated customer.
     - Headers:
       - `Authorization: Bearer <token>`
   - **GET /ride/feedback**
     - Description: Get all feedback provided by customers (accessible by managers).
   - **GET /ride/customer/:customerId**
     - Description: Get all rides associated with a specific customer.
     - Params:
       - `customerId: number`
   - **GET /ride/driver/:driverId**
     - Description: Get all rides associated with a specific driver.
     - Params:
       - `driverId: number`
   - **PUT /ride/:rideId/status**
     - Description: Update the status of a ride.
     - Params:
       - `rideId: number`
     - Body:
       ```json
       {
         "status": "pending | accepted | in_progress | completed | cancelled"
       }
       ```
   - **PUT /ride/:rideId/feedback**
     - Description: Provide feedback for a ride.
     - Params:
       - `rideId: number`
     - Body:
       ```json
       {
         "rating": "number",
         "feedback": "string"
       }
       ```
   - **POST /ride/:rideId/accept**
     - Description: Allow a driver to accept a ride (requires authentication as a driver).
     - Headers:
       - `Authorization: Bearer <token>`
     - Params:
       - `rideId: number`
